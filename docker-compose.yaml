version: '3.7'
services:
  nginx:
    build:
      context: ./
      dockerfile: nginx/Dockerfile
    ports:
      - '3000:80'
    networks:
      - public
    depends_on:
      events-service:
        condition: service_healthy
      users-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      location-service:
        condition: service_healthy

  events-service:
    platform: linux/amd64
    build:
      context: ./
      dockerfile: apps/events-service/Dockerfile.dev
    volumes:
      - ./:/app # Maps host directory to container directory
    networks:
      - private
    env_file:
      - .env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      users-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:3000/events-service"
        ]
      interval: 5s
      timeout: 20s
      retries: 10
  users-service:
    platform: linux/amd64
    build:
      context: ./
      dockerfile: apps/users-service/Dockerfile.dev
    volumes:
      - ./:/app
    networks:
      - private
    env_file:
      - .env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/users-service" ]
      interval: 5s
      timeout: 20s
      retries: 10

  auth-service:
    platform: linux/amd64
    build:
      context: ./
      dockerfile: apps/auth-service/Dockerfile.dev
    volumes:
      - ./:/app
    networks:
      - private
    env_file:
      - .env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      location-service:
        condition: service_healthy

    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:3003/auth-service"
        ]
      interval: 5s
      timeout: 20s
      retries: 10

  location-service:
    platform: linux/amd64
    build:
      context: ./
      dockerfile: apps/location-service/Dockerfile.dev
    volumes:
      - ./:/app
    networks:
      - private
    env_file:
      - .env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:3002/location-service"
        ]
      interval: 5s
      timeout: 20s
      retries: 10

  mongo:
    image: mongo:6.0
    volumes:
      - ~/mongo:/data/db
    ports:
      - 27017:27017
    networks:
      - public
      - private
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--eval",
          "'db.adminCommand(\"ping\")'"
        ]
      interval: 5s
      timeout: 20s
      retries: 10

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - public
      - private
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "redis", "ping" ]
      interval: 5s
      timeout: 20s
      retries: 10

  rabbitmq:
    image: rabbitmq
    command: rabbitmq-server
    expose:
      - 5672
      - 15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 15s
      retries: 5
    networks:
      - public
      - private

networks:
  public:
  private:
    driver: bridge
    internal: true
